{"ast":null,"code":"var _jsxFileName = \"/Users/matt.lynner/Documents/code/purina-shelter-chat-app/client/src/components/ChatPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport ChatBody from './ChatBody';\nimport ChatFooter from './ChatFooter';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatPage = ({\n  socket\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [botMessages, setBotMessages] = useState([]);\n  const location = useLocation();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Extract sessionId from URL query parameters\n        const searchParams = new URLSearchParams(location.search);\n        const sessionId = searchParams.get('id');\n        if (sessionId) {\n          const response = await fetch(`http://localhost:4000/proxy/transcripts?id=${sessionId}`);\n          const data = await response.json();\n          setBotMessages(data);\n        } else {\n          console.error('Session ID not found in URL parameters');\n        }\n      } catch (error) {\n        console.error('Error fetching the data:', error);\n      }\n    };\n    fetchData();\n    socket.on('messageResponse', data => setMessages([...messages, data]));\n  }, [socket, messages, location.search]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ChatBody, {\n      messages: messages,\n      botMessages: botMessages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatFooter, {\n      socket: socket\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ChatPage, \"AZwn+inpNjz6ASlTRJP2Th8Qp1w=\", false, function () {\n  return [useLocation];\n});\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useEffect","useState","ChatBody","ChatFooter","useLocation","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatPage","socket","_s","messages","setMessages","botMessages","setBotMessages","location","fetchData","searchParams","URLSearchParams","search","sessionId","get","response","fetch","data","json","console","error","on","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/matt.lynner/Documents/code/purina-shelter-chat-app/client/src/components/ChatPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ChatBody from './ChatBody';\nimport ChatFooter from './ChatFooter';\nimport { useLocation } from 'react-router-dom';\n\nconst ChatPage = ({ socket }) => {\n  const [messages, setMessages] = useState([]);\n  const [botMessages, setBotMessages] = useState([]);\n  const location = useLocation();\n\nuseEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Extract sessionId from URL query parameters\n        const searchParams = new URLSearchParams(location.search);\n        const sessionId = searchParams.get('id');\n\n        if (sessionId) {\n          const response = await fetch(`http://localhost:4000/proxy/transcripts?id=${sessionId}`);\n          const data = await response.json();\n          setBotMessages(data);\n        } else {\n          console.error('Session ID not found in URL parameters');\n        }\n      } catch (error) {\n        console.error('Error fetching the data:', error);\n      }\n    };\n\n    fetchData();\n    socket.on('messageResponse', (data) => setMessages([...messages, data]));\n  }, [socket, messages, location.search]);\n\n  return (\n    <>\n      <ChatBody messages={messages} botMessages={botMessages} />\n      <ChatFooter socket={socket} />\n    </>\n  );\n};\n\nexport default ChatPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,UAAU,MAAM,cAAc;AACrC,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE/C,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC/B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAMe,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAEhCJ,SAAS,CAAC,MAAM;IACZ,MAAMiB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,MAAMC,YAAY,GAAG,IAAIC,eAAe,CAACH,QAAQ,CAACI,MAAM,CAAC;QACzD,MAAMC,SAAS,GAAGH,YAAY,CAACI,GAAG,CAAC,IAAI,CAAC;QAExC,IAAID,SAAS,EAAE;UACb,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,8CAA8CH,SAAS,EAAE,CAAC;UACvF,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;UAClCX,cAAc,CAACU,IAAI,CAAC;QACtB,CAAC,MAAM;UACLE,OAAO,CAACC,KAAK,CAAC,wCAAwC,CAAC;QACzD;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IAEDX,SAAS,CAAC,CAAC;IACXP,MAAM,CAACmB,EAAE,CAAC,iBAAiB,EAAGJ,IAAI,IAAKZ,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEa,IAAI,CAAC,CAAC,CAAC;EAC1E,CAAC,EAAE,CAACf,MAAM,EAAEE,QAAQ,EAAEI,QAAQ,CAACI,MAAM,CAAC,CAAC;EAEvC,oBACEd,OAAA,CAAAE,SAAA;IAAAsB,QAAA,gBACExB,OAAA,CAACJ,QAAQ;MAACU,QAAQ,EAAEA,QAAS;MAACE,WAAW,EAAEA;IAAY;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1D5B,OAAA,CAACH,UAAU;MAACO,MAAM,EAAEA;IAAO;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAC9B,CAAC;AAEP,CAAC;AAACvB,EAAA,CAlCIF,QAAQ;EAAA,QAGKL,WAAW;AAAA;AAAA+B,EAAA,GAHxB1B,QAAQ;AAoCd,eAAeA,QAAQ;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}